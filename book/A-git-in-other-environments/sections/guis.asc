=== Графични интерфейси

(((GUIs)))(((Graphical tools)))
Нативната среда на Git е терминала.
Новите функционалности се появяват първо там и само командния ред е мястото, където Git ви предоставя пълната си сила.
Но чистият текст не винаги е подходящия избор за всички задачи, понякога визуалното представяне е необходимо и отделно от това има много потребители, които се чувстват по-комфортно с мишката.

Важно е да посочим, че различните интерфейси са проектирани за различни работни процеси.
Някои клиенти дават достъп само до внимателно подбрано подмножество от функционалностите на Git с цел да подпомогнат специфичен начин на работа, който авторът на интерфейса намира за ефективен.
Погледнато от този аспект, никой от тези инструменти не може да се нарече ``по-добър'' от кой да е друг, те просто са фокусирани за конкретна цел. 
Също така подчертаваме, че няма дейност извършвана от графичните клиенти, която да не може да се реализира в команден ред.

==== `gitk` и `git-gui`

(((git commands, gitk)))(((git commands, gui)))(((gitk)))
Когато инсталирате Git, получавате неговите визуални инструменти `gitk` и `git-gui`.

`gitk` е графичен инструмент за разглеждане на историята.
Мислете за него като за мощен GUI заместител на `git log` и `git grep`.
Това е инструментът, който ви трябва, ако се опитвате да намерите нещо случило се в миналото или искате да визуализирате историята на проекта.

Gitk най-лесно се стартира от командния ред.
Просто влезте в Git хранилище и изпълнете:

[source,console]
----
$ gitk [git log options]
----

Gitk приема много аргументи от командния ред, повечето от които се изпращат към съответните `git log` операции.
Един от най-полезните е флагът `--all`, който инструктира gitk д апоказва къмитите достъпни от _всяка_ референция, не само от HEAD.
Интерфейсът изглежда така:

.`gitk` history viewer.
image::images/gitk.png[`gitk` history viewer.]

Най-отгоре виждаме нещо наподобяващо изхода на `git log --graph`, всяка точка представлява къмит, линиите показват родителските връзки и референциите се показват като оцветени кутии.
Жълтата точка представя HEAD, а червената точка са промените, които все още не са къмитнати.
В долния край имате преглед на избрания къмит, коментарите и пача отляво и обобщение вдясно.
Между тези две секции има колекция от контроли за търсене в историята.

`git-gui`, от друга страна, е предимно инструмент за работа с къмити.
И той се стартира най-лесно от конзолата:

[source,console]
-----
$ git gui
-----

И изглежда така:

.Интерфейсът на `git-gui`.
image::images/git-gui.png[Интерфейсът на `git-gui`.]

Отляво на екрана виждаме неиндексираните промени отгоре, под тях са индексираните.
Можете да местите цели файлове между двете области щраквайки върху иконите им или можете да изберете файл за преглед като щракнете върху името му.

Горе вдясно е diff изгледът, който показва промените по текущо селектирания файл.
Можете да индексирате индивидуални hunks (или отделни редове) с дясно щракване в тази област.

Долу вдясно е областта за дейности и съобщения.
Напишете съобщението си в кутията и натиснете ``Commit'' за да направите нещо подобно на `git commit`.
Можете също да изберете да откажете последния къмит с радио бутона``Amend'', което ще опресни областта ``Staged Changes'' със съдържанието му.
След това можете просто да индексирате и деиндексирате някои промени, да промените къмит съобщението и да натиснете бутона ``Commit'' повторно, за да замените стария къмит с нов. 

`gitk` и `git-gui` са примери за task-oriented инструменти.
Всеки от тях е насочен към специфична задача (съответно за преглед на история и промяна на къмити) и не предлагат функционалности, които не я засягат.


==== GitHub за Mac и Windows

(((GitHub for Mac)))(((GitHub for Windows)))
GitHub предоставя два workflow-ориентирани Git клиента, по един за Windows и Mac.
Тези клиенти са добър пример за workflow-ориентирани инструменти -- вместо да предоставят _цялата_  Git функционалност, те са фокусирани върху подбрани части от нея, които работят добре заедно и които потребителите често използват.
Те изглеждат така:

.GitHub за Mac.
image::images/github_mac.png[GitHub for Mac.]

.GitHub за Windows.
image::images/github_win.png[GitHub for Windows.]

Проектирани са да изглеждат и работят почити еднакво, така че ще ги разгледаме като един продукт.
Няма да навлизаме в детайли (имат подробна документация), а ще разгледаме набързо изгледа ``changes'' (в който ще прекарвате повечето си време) is in order.

* Вляво са хранилищата, които клиентът следи; можете да добавяте хранилища (с клониране или локално прикачване) с иконата ``+'' в горния край.
* В центъра е commit-input областта, която позволява да въведете къмит съобщение и да изберете кои файлове да се включат.
  (Под Windows, историята на къмитите се показва директно отдолу, под Mac е в отделен таб.)
* В дясно е diff изгледа, който показва промените в работната директория или кои промени са включени в избрания къмит.
* Последно имаме бутон ``Sync'' в горната дясна част, който е основния начин за комуникация през мрежата.

[NOTE]
====
Не се нуждаете от GitHub акаунт за да ползвате тези програми.
Въпреки, че са проектирани да се възползват максимално добре от услугите на GitHub и препоръчвания от него тип работен процес, те ще си работят добре с вско хранилище и ще контактуват по мрежата с всеки Git хост.
====

===== Installation

GitHub for Windows can be downloaded from https://windows.github.com[], and GitHub for Mac from https://mac.github.com[].
When the applications are first run, they walk you through all the first-time Git setup, such as configuring your name and email address, and both set up sane defaults for many common configuration options, such as credential caches and CRLF behavior.

Both are ``evergreen'' – updates are downloaded and installed in the background while the applications are open.
This helpfully includes a bundled version of Git, which means you probably won't have to worry about manually updating it again.
On Windows, the client includes a shortcut to launch Powershell with Posh-git, which we'll talk more about later in this chapter.

The next step is to give the tool some repositories to work with.
The client shows you a list of the repositories you have access to on GitHub, and can clone them in one step.
If you already have a local repository, just drag its directory from the Finder or Windows Explorer into the GitHub client window, and it will be included in the list of repositories on the left.

===== Recommended Workflow

Once it's installed and configured, you can use the GitHub client for many common Git tasks.
The intended workflow for this tool is sometimes called the ``GitHub Flow.''
We cover this in more detail in <<ch06-github#_github_flow>>, but the general gist is that (a) you'll be committing to a branch, and (b) you'll be syncing up with a remote repository fairly regularly.

Branch management is one of the areas where the two tools diverge.
On Mac, there's a button at the top of the window for creating a new branch:

.``Create Branch'' button on Mac.
image::images/branch_widget_mac.png[``Create Branch'' button on Mac.]

On Windows, this is done by typing the new branch's name in the branch-switching widget:

.Creating a branch on Windows.
image::images/branch_widget_win.png[Creating a branch on Windows.]

Once your branch is created, making new commits is fairly straightforward.
Make some changes in your working directory, and when you switch to the GitHub client window, it will show you which files changed.
Enter a commit message, select the files you'd like to include, and click the ``Commit'' button (ctrl-enter or ⌘-enter).

The main way you interact with other repositories over the network is through the ``Sync'' feature.
Git internally has separate operations for pushing, fetching, merging, and rebasing, but the GitHub clients collapse all of these into one multi-step feature.
Here's what happens when you click the Sync button:

. `git pull --rebase`.
  If this fails because of a merge conflict, fall back to `git pull --no-rebase`.
. `git push`.

This is the most common sequence of network commands when working in this style, so squashing them into one command saves a lot of time.

===== Summary

These tools are very well-suited for the workflow they're designed for.
Developers and non-developers alike can be collaborating on a project within minutes, and many of the best practices for this kind of workflow are baked into the tools.
However, if your workflow is different, or you want more control over how and when network operations are done, we recommend you use another client or the command line.


==== Other GUIs

There are a number of other graphical Git clients, and they run the gamut from specialized, single-purpose tools all the way to apps that try to expose everything Git can do.
The official Git website has a curated list of the most popular clients at http://git-scm.com/downloads/guis[].
A more comprehensive list is available on the Git wiki site, at https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[].
