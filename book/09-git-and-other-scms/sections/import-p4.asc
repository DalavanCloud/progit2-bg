[[_perforce_import]]
==== Perforce

(((Perforce)))(((Importing, from Perforce)))
Следващата система, за която ще разгледаме процеса по импортиране на данни, е Perforce.
Както видяхме по-рано, Git и Perforce могат да комуникират по два начина: посредством git-p4 и Perforce Git Fusion.

===== Perforce Git Fusion

Git Fusion прави процеса сравнително безболезнен.
Просто задаваме настройките на проекта, мапинга на потребителите и клоновете в конфигурационен файл (виж <<_p4_git_fusion>>) и клонираме хранилището.
Git Fusion ни изработва резултат подобен на оригинално Git хранилище, което е готово да се публикува на Git сървър.
Можем дори да използваме Perforce като Git хост, ако желаем това.

[[_git_p4]]
===== Git-p4

Git-p4 може също да работи като имортиращ инструмент.
Като пример, ще импортираме проекта Jam от Perforce публичното депо.
За да настроим клиента си, трябва да експортираме P4PORT environment променливата, така че да сочи към Perforce депото:

[source,console]
----
$ export P4PORT=public.perforce.com:1666
----

[NOTE]
====
За да продължите примерните инструкции, се нуждаете от достъп до Perforce депо.
Ще използваме публичното такова на адрес public.perforce.com, но може да експериментирате с всяко друго, до което имате достъп.
====

(((git commands, p4)))
Изпълняваме командата `git p4 clone` за да импортираме проекта Jam от Perforce сървъра, подавайки ѝ като аргументи депото с пътя до проекта и пътя, в който искаме да го импортираме:

[source,console]
----
$ git-p4 clone //guest/perforce_software/jam@all p4import
Importing from //guest/perforce_software/jam@all into p4import
Initialized empty Git repository in /private/tmp/p4import/.git/
Import destination: refs/remotes/p4/master
Importing revision 9957 (100%)
----

Този проект има само един клон, но ако имаме клонове конфигурирани с branch изгледи (или само множество от директории), може да използваме флага `--detect-branches` за да инструктираме `git p4 clone` да импортира всички клонове на проекта.
Вижте <<_git_p4_branches>> за повече подробности.

На този етап сме почти готови.
Ако влезем в директорията `p4import` и изпълним `git log`, можем да видим импортираната работа:

[source,console]
----
$ git log -2
commit e5da1c909e5db3036475419f6379f2c73710c4e6
Author: giles <giles@giles@perforce.com>
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change </UL> to </OL>.

    [git-p4: depot-paths = "//public/jam/src/": change = 8068]

commit aa21359a0a135dda85c50a7f7cf249e4f7b8fd98
Author: kwirth <kwirth@perforce.com>
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -> cumulative).

    [git-p4: depot-paths = "//public/jam/src/": change = 7304]
----

Може да забележите как `git-p4` е оставила идентификатор във всяко къмит съобщение.
Добре е той да се запази, в случай че по-късно се наложи да се обърнем към Perforce change number-a по някаква причина.
Обаче, ако искаме да махнем идентификатора, сега е времето за това -- преди да започнем работа по новото хранилище.
(((git commands, filter-branch)))
За целта използваме командата `git filter-branch`:

[source,console]
----
$ git filter-branch --msg-filter 'sed -e "/^\[git-p4:/d"'
Rewrite e5da1c909e5db3036475419f6379f2c73710c4e6 (125/125)
Ref 'refs/heads/master' was rewritten
----

Ако пуснем `git log`, ще видим как всички SHA-1 чексуми за къмитите са се променили, но `git-p4` стринговете вече отсъстват от къмит съобщенията:

[source,console]
----
$ git log -2
commit b17341801ed838d97f7800a54a6f9b95750839b7
Author: giles <giles@giles@perforce.com>
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change </UL> to </OL>.

commit 3e68c2e26cd89cb983eb52c024ecdfba1d6b3fff
Author: kwirth <kwirth@perforce.com>
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -> cumulative).
----

Сега импортираното хранилище е готово да се публикува на Git сървър.
