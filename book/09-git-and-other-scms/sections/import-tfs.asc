[[_git_tfs]]
==== TFS

(((TFS)))(((Importing, from TFS)))
Ако екипът ви мигрира контрола на версиите от TFVC към Git, вероятно ще искате възможно най-прецизното конвертиране.
Това значи, че независимо че по-рано разгледахме и git-tfs и git-tf в секцията за съвместна работа, по отношение на импортирането ще говорим само за git-tfs, тъй като git-tfs поддържа клонове -- нещо което е трудна работа с git-tf.

[NOTE]
====
Това е еднопосочно конвертиране.
Полученото Git хранилище няма да може да се свърже с оригиналния TFVC проект.
====

Първата задача е да се направи мапинга на потребителските имена.
TFVC е либерална система по отношение на информацията, която се записва в author полето на changeset-ите, но Git изисква human-readable име и имейл адрес.
Можете да вземете тази информация от `tf` command-line клиента така:

[source,powershell]
----
PS> tf history $/myproject -recursive > AUTHORS_TMP
----

Това извлича всички changesets в историята на проекта и ги запсва във файла AUTHORS_TMP, който след това ще обработим за да извлечем данните от полето 'User' (второто по ред).
Отворете файла, вижте на кои позиции започва и свършва полето и след това заменете параметрите `11-20` на `cut` командата с позициите, които установихте:

[source,powershell]
----
PS> cat AUTHORS_TMP | cut -b 11-20 | tail -n+3 | sort | uniq > AUTHORS
----

Командата `cut` оставя само символите на позиция между 11 и 20 от всеки ред.
Командата `tail` пропуска първите два реда, които представляват имената на полетата и подчертаващи символи в ASCII стил.
Резултатът от всичко това се пренасочва към `sort` и `uniq` за елиминиране на повторенията и се записва във файла `AUTHORS`.
Следващата стъпка е ръчна, с цел git-tfs да може да използва файла ефективно, всеки ред трябва да е в този формат:

[source,text]
----
DOMAIN\username = User Name <email@address.com>
----

Частта вляво е ``User'' полето от TFVC, а вдясно от знака за равенство е потребителското име, което ще се използва за Git къмитите.

След като най-сетне имаме този файл, следващото нещо е да направим пълно клониране на TFVC проекта, който ни интересува:

[source,powershell]
----
PS> git tfs clone --with-branches --authors=AUTHORS https://username.visualstudio.com/DefaultCollection $/project/Trunk project_git
----

След това искаме да изчистим `git-tfs-id` секциите от долния край на всяко къмит съобщение.
Следната команда ще направи това:

[source,powershell]
----
PS> git filter-branch -f --msg-filter 'sed "s/^git-tfs-id:.*$//g"' '--' --all
----

Тук се използва командата `sed` от Git-bash обкръжението за замяна на всеки ред започващ с ``git-tfs-id:'' с празни символи, които Git после ще игнорира.

Веднъж след като това е готово, можем да добавим нашия нов remote, да публикуваме всичките си клонове и екипът да премине на Git.
