=== Управление на проект

(((maintaining a project)))
След като разгледахме как се допринася в проект, вероятно ще ви интересува и обратната страна, как да поддържаме собствен такъв.
Това може да включва приемане и прилагане на пачове генерирани през `format-patch` и изпратени до вас или пък интегриране на промени в отдалечени клонове за хранилища добавени като remotes към проекта ви.
Независимо дали поддържате canonical хранилище или искате да помогнете проверявайки и одобрявайки пачове, трябва да знаете как да приемате работа от колегите ви по начин ясен за тях и устойчив за вас във времето.

==== Работа в Topic клонове

(((branches, topic)))
Когато мислите да интегрирате новополучени промени, добра идея е да ги изпробвате в topic клон -- временен такъв създаден специално за теста.
По такъв начин е лесно да поправите пач индивидуално и да го зарежете, ако той не работи, докато имате време да го разгледате по-подробно.
Ако създадете клон с име съответстващо на темата на изпратената работа, например `ruby_client` или нещо подобно, можете лесно да го запомните и по-късно да се върнете в него.
Поддръжникът на Git проекта например дори се стреми да използва namespaces за тези имена -- като `sc/ruby_client`, където `sc` е съкращение за човека, който е изпратил работата.
Както помним, създаването на клон базиран на `master` се прави така:

[source,console]
----
$ git branch sc/ruby_client master
----

Или, ако искате да превключите към него веднага, може да използвате `checkout -b` варианта:

[source,console]
----
$ git checkout -b sc/ruby_client master
----

Сега сте готови да добавите новата работа, която сте получили, в този нов topic клон и да решите дали искате да я слеете в long-term клоновете си.

[[_patches_from_email]]
==== Прилагане на пачове от Email

(((email, applying patches from)))
If you receive a patch over email that you need to integrate into your project, you need to apply the patch in your topic branch to evaluate it.
There are two ways to apply an emailed patch: with `git apply` or with `git am`.

===== Applying a Patch with apply

(((git commands, apply)))
Ако сте получили пача от някого, който го е генерирал с `git diff` или някакъв вариант на Unix `diff` инструмента (което не е препоръчително, вижте следващата секция), можете да го приложите с командата `git apply`.
Ако сте записали пача в `/tmp/patch-ruby-client.patch`:

[source,console]
----
$ git apply /tmp/patch-ruby-client.patch
----

Това модифицира файловете в работната директория.
Командата е почти идентична на `patch -p1`, въпреки че е по-параноична и приема по-малко fuzzy matches от patch.
Тя също така обработва добавянето, изтриването и преименуването на файлове, ако тези процеси са правилно описани в `git diff` формата, нещо което `patch` няма да направи.
Освен това `git apply` използва модела ``apply all or abort all'', където или всичко се прилага успешно или нищо не се прилага. За разлика от нея, `patch` може да прилага частично patchfiles, оставяйки работната ви директория в странен статус.
`git apply` като цяло е много по-консервативна от `patch`.
Процесът няма автоматично да ви направи къмит -- след като завърши ще трябва сами да индексирате и къмитнете промените.

Можете също да използвате `git apply` за да видите дали пачът ще се приложи коректно преди в действителност да се изпълни, командата е `git apply --check` с името на пача:

[source,console]
----
$ git apply --check 0001-seeing-if-this-helps-the-gem.patch
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
----

Ако няма изход, тогава пачът би следвало да се приложи чисто.
В допълнение, командата завършва с код за грешка, ако проверката установи неуспех, така че можете да я използвате и в скриптове, ако желаете.

[[_git_am]]
===== Прилагане на пач с `am`

(((git commands, am)))
Ако работата идва от напреднал Git потребител, който е наясно с `format-patch`, тогава работата ви се улеснява, защото пачът ще съдържа също и информация за автора и къмит съобщение.
Ако можете, окуражавайте сътрудниците ви да използват `format-patch` вместо `diff`, когато генерират пачове за вас.
Използвайте `git apply` само за legacy пачове и неща като това (`diff` генерирани).

За да приложите пач генериран с `format-patch`, по-добрият вариант е да използвате `git am` (наречена е `am` понеже се използва за "apply a series of patches from a mailbox").
Технически, `git am` е проектирана да чете mbox файл, който е plain-text формат за съхранение на едно или повече имейл съобщения в един файл.
Изглежда по подобен начин:

[source,console]
----
From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001
From: Jessica Smith <jessica@example.com>
Date: Sun, 6 Apr 2008 10:17:23 -0700
Subject: [PATCH 1/2] add limit to log function

Limit log functionality to the first 20
----

Това е началото на изхода от командата `git format-patch`, който видяхме в предната секция, също валиден mbox имейл формат.
Ако някой ви е изпратил пача по пощата коректно с `git send-email` и го запишете в mbox формат, тогава можете да подадете на `git am` въпросния mbox файл и тя ще започне да прилага всички пачове, които намери.
Ако имате имейл клиент способен да записва множество съобщения в mbox формат, тогава можете да запишете цялата серия пачове в един файл и след това да пуснете `git am`, която да ги приложи последователно.

Обаче, ако някой е качил пач файл генериран с `git format-patch` към ticketing система или нещо подобно, можете да запишете файла локално и след това да го подадете на `git am` да го приложи:

[source,console]
----
$ git am 0001-limit-log-function.patch
Applying: add limit to log function
----

Може да видите, че той се е приложил чисто и автоматично се създава нов къмит за вас.
Информацията за автора е взета от хедърите `From` и `Date` на имейла, а къмит съобщението от `Subject` хедъра и тялото му (частта преди пача).
Например, ако този пач беше приложен от mbox примера отгоре, генерираният къмит би изглеждал така:

[source,console]
----
$ git log --pretty=fuller -1
commit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0
Author:     Jessica Smith <jessica@example.com>
AuthorDate: Sun Apr 6 10:17:23 2008 -0700
Commit:     Scott Chacon <schacon@gmail.com>
CommitDate: Thu Apr 9 09:19:06 2009 -0700

   add limit to log function

   Limit log functionality to the first 20
----

`Commit` реда индикира кой е човекът, който е приложил пача и времето, когато това е станало.
`Author` от своя страна носи информация за създателя на пача и кога е създаден първоначално.

Възможно е обаче пачът да не се прилага чисто.
Може главният ви клон да се е разделил твърде много от клона, от който е направен пача или пък самият пач да зависи от друг такъв, който все още не сте приложили.
В подобен случай `git am` ще прекъсне и ще ви попита как искате да продължите:

[source,console]
----
$ git am 0001-seeing-if-this-helps-the-gem.patch
Applying: seeing if this helps the gem
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
Patch failed at 0001.
When you have resolved this problem run "git am --resolved".
If you would prefer to skip this patch, instead run "git am --skip".
To restore the original branch and stop patching run "git am --abort".
----

Командата поставя маркери за конфликт в съответните файлове, както това става при конфликтно сливане или пребазиране.
Разрешаването на конфликтите също е аналогично -- редактирате файла, индексирате го и след това изпълнявате `git am --resolved` за да продължите цикъла със следващия пач:

[source,console]
----
$ (fix the file)
$ git add ticgit.gemspec
$ git am --resolved
Applying: seeing if this helps the gem
----

Ако искате Git да се опита да разреши конфликта по малко по-интелигентен начин, може да подадете флага `-3` и Git ще се опита да направи three-way сливане.
Тази опция е забранена по подразбиране, защото няма да работи в случай, че пачът рапортува, че е базиран на къмит, който не присъства в хранилището ви.
Ако обаче имате този къмит (ако пачът например е базиран на публичен такъв), тогава `-3` опцията е много по-гъвкава в прилагането на конфликтен пач:

[source,console]
----
$ git am -3 0001-seeing-if-this-helps-the-gem.patch
Applying: seeing if this helps the gem
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
No changes -- Patch already applied.
----

В този случай, без `-3` флага пачът щеше се счита за конфликтен.
Но понеже той е подаден, пачът се прилага чисто.

Ако прилагате множество от пачове от mbox, можете също така да пуснете `am` командата в интерактивен режим, при което тя ще спира на всеки пач и ще ви пита дали желаете да го приложи:

[source,console]
----
$ git am -3 -i mbox
Commit Body is:
--------------------------
seeing if this helps the gem
--------------------------
Apply? [y]es/[n]o/[e]dit/[v]iew patch/[a]ccept all
----

Това е полезно при много пачове, защото можете да видите всеки от тях, ако сте забравили за какво е или да го откажете, ако вече е приложен.

Когато всички пачове са приложени и къмитнати в topic клона, може да изберете дали и кога да ги интегрирате в long-term клон.

[[_checking_out_remotes]]
==== Извличане от отделечени клонове

(((branches, remote)))
Работата на вашите колеги може и да не идва по имейл. Те могат да имат свои собствени онлайн хранилища, да са извършили много промени и да са ви пратили URL до хранилището и клона, където промените се пазят. В случаи като този, можете да добавите отдалечените хранилища и да сливате локално вместо да пачвате.

Ако Jessica ви съобщи, че има нова функционалност в клона `ruby-client` на хранилището ѝ, можете да тествате бързо добавяйки го като remote референция и извличайки клона локално:

[source,console]
----
$ git remote add jessica git://github.com/jessica/myproject.git
$ git fetch jessica
$ git checkout -b rubyclient jessica/ruby-client
----

Ако впоследствие тя ви съобщи за нова функционалност в отделен клон, можете директно да направите `fetch` и `checkout`, защото вече отдалеченото хранилище е конфигурирано при вас.

Това е най-полезно, ако работите сравнително често с даден колега.
Ако някой иска да ви изпрати само единичен пач и няма намерение за продължително сътрудничество, тогава имейл методът вероятно е по-бързо решение и няма нужда колегата ви да поддържа онлайн хранилище.
Освен това едва ли бихте искали да имате стотици remotes, всяко от които допринася само с един-два пача.
Обаче, скриптовете и хостнатите публични услуги могат да улеснят това -- зависи най-вече от това как разработвате вие и как колегите ви.

Друго предимство на този подход е, че получавате историята на къмитите.
Въпреки, че може да имате merge проблеми, вие все пак знаете на коя точка от историята ви е базирана работата на колегата и правилното three-way сливане е по подразбиране вместо да трябва да подавате `-3` и да се надявате, че пачът е бил генериран на публичен къмит, до който имате достъп.

Ако не работите често с определен колега, но въпреки това искате да получавате работата му по този начин, можете да подадете на `git pull` директно адреса на отдалеченото хранилище.
По този начин правите one-time pull и не съхранявате URL-а като remote референция:

[source,console]
----
$ git pull https://github.com/onetimeguy/project
From https://github.com/onetimeguy/project
 * branch            HEAD       -> FETCH_HEAD
Merge made by the 'recursive' strategy.
----

[[_what_is_introduced]]
==== Изследване на промените

(((branches, diffing)))
Сега имате topic клон с новата работа от колега.
На този етап може да определите какво бихте искали да правите с нея.
Тази секция преглежда няколко команди, които ви помагат да разберете какво точно ще бъде въведено в главния клон, ако решите да направите сливане на topic клона.

Често е полезно да имате представа за всички къмити, които са налични във временния клон, но все още не са в главния.
Можете да извадите къмитите в `master` клона добавяйки опцията`--not` преди имаето му.
Това прави същото като формата `master..contrib`, който видяхме по-рано.
Например, ако вашият колега ви изпрати два пача и създадете клон `contrib`, в който сте ги приложили, може да изпълните това:

[source,console]
----
$ git log contrib --not master
commit 5b6235bd297351589efc4d73316f0a68d484f118
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Oct 24 09:53:59 2008 -0700

    seeing if this helps the gem

commit 7482e0d16d04bea79d0dba8988cc78df655f16a0
Author: Scott Chacon <schacon@gmail.com>
Date:   Mon Oct 22 19:38:36 2008 -0700

    updated the gemspec to hopefully work better
----

Ако ви трябват и промените, които въвежда всеки къмит, можете да подадете флага `-p` към `git log` и тя ще ви изведе в допълнение diff информацията за всеки от къмитите.

За да видите пълен diff на това какво ще се случи, ако слеете този topic клон с друг, може да се наложи да използвате малък трик, за да получите коректните резултати.
Може би си мислите за това:

[source,console]
----
$ git diff master
----

Командата действително извежда diff, но той може да е заблуждаващ.
Ако `master` клонът се е придвижил напред след като сте създали topic клона от него, тогава ще получите изглеждащи странно резултати.
Това се случва, защото Git директно сравнява snapshot-а на последния къмит от topic клона, в който сте и snapshot-а на най-новия къмит от `master` клона.
Ако например сте добавили ред във файл от `master` след създаването на topic клона, директното сравнение на snapshot-ите ще изглежда така сякаш при сливане topic клона ще изтрие този ред.

Ако `master` е директен родител на topic клона това не е проблем. Но ако двете истории са се разклонили, тогава diff изходът ще показва, че добавяте всичките нови промени от topic и изтривате всичко уникално за `master` клона.

Но, това което наистина искате да видите, са промените добавени в topic -- работата, която ще бъде въведена при сливането му в `master`.
Начинът да получите този резултат е да накарате Git да сравни последния къмит в topic клона с първия общ предшественик от `master`.

Технически това може да направите като изрично установите кой е този предшественик и след това изпълните diff към него:

[source,console]
----
$ git merge-base contrib master
36c7dba2c95e6bbb78dfa822519ecfec6e1ca649
$ git diff 36c7db
----

или по-съкратено:

[source,console]
----
$ git diff $(git merge-base contrib master)
----

И понеже нито един от тези два начина не е достатъчно удобен, Git осигурява още едно съкратено изписване за същия резултат: triple-dot синтаксиса.
В контекста на командата `git diff`, можете да поставите три точки между имената на два клона и тогава Git ще изпълни `diff` между последния къмит на клона отдясно в израза (contrib) и най-актуалния му общ предшествник от клона вляво (master):

[source,console]
----
$ git diff master...contrib
----

Така получавате само работата, която текущия topic клон въвежда от последния общ родителски къмит в `master`.
Това е един много полезен синтаксис и си заслужава да се запомни наизуст.

==== Integrating Contributed Work

(((integrating work)))
When all the work in your topic branch is ready to be integrated into a more mainline branch, the question is how to do it.
Furthermore, what overall workflow do you want to use to maintain your project?
You have a number of choices, so we'll cover a few of them.

===== Merging Workflows

(((workflows, merging)))
One basic workflow is to simply merge all that work directly into your `master` branch.
In this scenario, you have a `master` branch that contains basically stable code.
When you have work in a topic branch that you think you've completed, or work that someone else has contributed and you've verified, you merge it into your master branch, delete that just-merged topic branch, and repeat.

For instance, if we have a repository with work in two branches named `ruby_client` and `php_client` that looks like <<merwf_a>>, and we merge `ruby_client` followed by `php_client`, your history will end up looking like <<merwf_b>>.

[[merwf_a]]
.History with several topic branches.
image::images/merging-workflows-1.png[History with several topic branches.]

[[merwf_b]]
.After a topic branch merge.
image::images/merging-workflows-2.png[After a topic branch merge.]

That is probably the simplest workflow, but it can possibly be problematic if you're dealing with larger or more stable projects where you want to be really careful about what you introduce.

If you have a more important project, you might want to use a two-phase merge cycle.
In this scenario, you have two long-running branches, `master` and `develop`, in which you determine that `master` is updated only when a very stable release is cut and all new code is integrated into the `develop` branch.
You regularly push both of these branches to the public repository.
Each time you have a new topic branch to merge in (<<merwf_c>>), you merge it into `develop` (<<merwf_d>>); then, when you tag a release, you fast-forward `master` to wherever the now-stable `develop` branch is (<<merwf_e>>).

[[merwf_c]]
.Before a topic branch merge.
image::images/merging-workflows-3.png[Before a topic branch merge.]

[[merwf_d]]
.After a topic branch merge.
image::images/merging-workflows-4.png[After a topic branch merge.]

[[merwf_e]]
.After a project release.
image::images/merging-workflows-5.png[After a topic branch release.]

This way, when people clone your project's repository, they can either check out `master` to build the latest stable version and keep up to date on that easily, or they can check out `develop`, which is the more cutting-edge content.
You can also extend this concept by having an `integrate` branch where all the work is merged together.
Then, when the codebase on that branch is stable and passes tests, you merge it into a `develop` branch; and when that has proven itself stable for a while, you fast-forward your `master` branch.

===== Large-Merging Workflows

(((workflows, "merging (large)")))
The Git project has four long-running branches: `master`, `next`, and `pu` (proposed updates) for new work, and `maint` for maintenance backports.
When new work is introduced by contributors, it's collected into topic branches in the maintainer's repository in a manner similar to what we've described (see <<merwf_f>>).
At this point, the topics are evaluated to determine whether they're safe and ready for consumption or whether they need more work.
If they're safe, they're merged into `next`, and that branch is pushed up so everyone can try the topics integrated together.

[[merwf_f]]
.Managing a complex series of parallel contributed topic branches.
image::images/large-merges-1.png[Managing a complex series of parallel contributed topic branches.]

If the topics still need work, they're merged into `pu` instead.
When it's determined that they're totally stable, the topics are re-merged into `master`.
The `next` and `pu` branches are then rebuilt from the `master`.
This means `master` almost always moves forward, `next` is rebased occasionally, and `pu` is rebased even more often:

.Merging contributed topic branches into long-term integration branches.
image::images/large-merges-2.png[Merging contributed topic branches into long-term integration branches.]

When a topic branch has finally been merged into `master`, it's removed from the repository.
The Git project also has a `maint` branch that is forked off from the last release to provide backported patches in case a maintenance release is required.
Thus, when you clone the Git repository, you have four branches that you can check out to evaluate the project in different stages of development, depending on how cutting edge you want to be or how you want to contribute; and the maintainer has a structured workflow to help them vet new contributions.
The Git project's workflow is specialized. To clearly understand this you could check out the https://github.com/git/git/blob/master/Documentation/howto/maintain-git.txt[Git Maintainer's guide].

[[_rebase_cherry_pick]]
===== Rebasing and Cherry-Picking Workflows

(((workflows, rebasing and cherry-picking)))
Other maintainers prefer to rebase or cherry-pick contributed work on top of their master branch, rather than merging it in, to keep a mostly linear history.
When you have work in a topic branch and have determined that you want to integrate it, you move to that branch and run the rebase command to rebuild the changes on top of your current master (or `develop`, and so on) branch.
If that works well, you can fast-forward your `master` branch, and you'll end up with a linear project history.

(((git commands, cherry-pick)))
The other way to move introduced work from one branch to another is to cherry-pick it.
A cherry-pick in Git is like a rebase for a single commit.
It takes the patch that was introduced in a commit and tries to reapply it on the branch you're currently on.
This is useful if you have a number of commits on a topic branch and you want to integrate only one of them, or if you only have one commit on a topic branch and you'd prefer to cherry-pick it rather than run rebase.
For example, suppose you have a project that looks like this:

.Example history before a cherry-pick.
image::images/rebasing-1.png[Example history before a cherry-pick.]

If you want to pull commit `e43a6` into your master branch, you can run

[source,console]
----
$ git cherry-pick e43a6
Finished one cherry-pick.
[master]: created a0a41a9: "More friendly message when locking the index fails."
 3 files changed, 17 insertions(+), 3 deletions(-)
----

This pulls the same change introduced in `e43a6`, but you get a new commit SHA-1 value, because the date applied is different.
Now your history looks like this:

.History after cherry-picking a commit on a topic branch.
image::images/rebasing-2.png[History after cherry-picking a commit on a topic branch.]

Now you can remove your topic branch and drop the commits you didn't want to pull in.

===== Rerere

(((git commands, rerere)))(((rerere)))
If you're doing lots of merging and rebasing, or you're maintaining a long-lived topic branch, Git has a feature called ``rerere'' that can help.

Rerere stands for ``reuse recorded resolution'' – it's a way of shortcutting manual conflict resolution.
When rerere is enabled, Git will keep a set of pre- and post-images from successful merges, and if it notices that there's a conflict that looks exactly like one you've already fixed, it'll just use the fix from last time, without bothering you with it.

This feature comes in two parts: a configuration setting and a command.
The configuration setting is `rerere.enabled`, and it's handy enough to put in your global config:

[source,console]
----
$ git config --global rerere.enabled true
----

Now, whenever you do a merge that resolves conflicts, the resolution will be recorded in the cache in case you need it in the future.

If you need to, you can interact with the rerere cache using the `git rerere` command.
When it's invoked alone, Git checks its database of resolutions and tries to find a match with any current merge conflicts and resolve them (although this is done automatically if `rerere.enabled` is set to `true`).
There are also subcommands to see what will be recorded, to erase specific resolution from the cache, and to clear the entire cache.
We will cover rerere in more detail in <<ch07-git-tools#ref_rerere>>.

[[_tagging_releases]]
==== Tagging Your Releases

(((tags)))(((tags, signing)))
When you've decided to cut a release, you'll probably want to assign a tag so you can re-create that release at any point going forward.
You can create a new tag as discussed in <<ch02-git-basics-chapter#ch02-git-basics-chapter>>.
If you decide to sign the tag as the maintainer, the tagging may look something like this:

[source,console]
----
$ git tag -s v1.5 -m 'my signed 1.5 tag'
You need a passphrase to unlock the secret key for
user: "Scott Chacon <schacon@gmail.com>"
1024-bit DSA key, ID F721C45A, created 2009-02-09
----

If you do sign your tags, you may have the problem of distributing the public PGP key used to sign your tags.
The maintainer of the Git project has solved this issue by including their public key as a blob in the repository and then adding a tag that points directly to that content.
To do this, you can figure out which key you want by running `gpg --list-keys`:

[source,console]
----
$ gpg --list-keys
/Users/schacon/.gnupg/pubring.gpg
---------------------------------
pub   1024D/F721C45A 2009-02-09 [expires: 2010-02-09]
uid                  Scott Chacon <schacon@gmail.com>
sub   2048g/45D02282 2009-02-09 [expires: 2010-02-09]
----

Then, you can directly import the key into the Git database by exporting it and piping that through `git hash-object`, which writes a new blob with those contents into Git and gives you back the SHA-1 of the blob:

[source,console]
----
$ gpg -a --export F721C45A | git hash-object -w --stdin
659ef797d181633c87ec71ac3f9ba29fe5775b92
----

Now that you have the contents of your key in Git, you can create a tag that points directly to it by specifying the new SHA-1 value that the `hash-object` command gave you:

[source,console]
----
$ git tag -a maintainer-pgp-pub 659ef797d181633c87ec71ac3f9ba29fe5775b92
----

If you run `git push --tags`, the `maintainer-pgp-pub` tag will be shared with everyone.
If anyone wants to verify a tag, they can directly import your PGP key by pulling the blob directly out of the database and importing it into GPG:

[source,console]
----
$ git show maintainer-pgp-pub | gpg --import
----

They can use that key to verify all your signed tags.
Also, if you include instructions in the tag message, running `git show <tag>` will let you give the end user more specific instructions about tag verification.

[[_build_number]]
==== Generating a Build Number

(((build numbers)))(((git commands, describe)))
Because Git doesn't have monotonically increasing numbers like 'v123' or the equivalent to go with each commit, if you want to have a human-readable name to go with a commit, you can run `git describe` on that commit.
Git gives you the name of the nearest tag with the number of commits on top of that tag and a partial SHA-1 value of the commit you're describing:

[source,console]
----
$ git describe master
v1.6.2-rc1-20-g8c5b85c
----

This way, you can export a snapshot or build and name it something understandable to people.
In fact, if you build Git from source code cloned from the Git repository, `git --version` gives you something that looks like this.
If you're describing a commit that you have directly tagged, it gives you the tag name.

The `git describe` command favors annotated tags (tags created with the `-a` or `-s` flag), so release tags should be created this way if you're using `git describe`, to ensure the commit is named properly when described.
You can also use this string as the target of a checkout or show command, although it relies on the abbreviated SHA-1 value at the end, so it may not be valid forever.
For instance, the Linux kernel recently jumped from 8 to 10 characters to ensure SHA-1 object uniqueness, so older `git describe` output names were invalidated.

[[_preparing_release]]
==== Preparing a Release

(((releasing)))(((git commands, archive)))
Now you want to release a build.
One of the things you'll want to do is create an archive of the latest snapshot of your code for those poor souls who don't use Git.
The command to do this is `git archive`:

[source,console]
----
$ git archive master --prefix='project/' | gzip > `git describe master`.tar.gz
$ ls *.tar.gz
v1.6.2-rc1-20-g8c5b85c.tar.gz
----

If someone opens that tarball, they get the latest snapshot of your project under a project directory.
You can also create a zip archive in much the same way, but by passing the `--format=zip` option to `git archive`:

[source,console]
----
$ git archive master --prefix='project/' --format=zip > `git describe master`.zip
----

You now have a nice tarball and a zip archive of your project release that you can upload to your website or email to people.

[[_the_shortlog]]
==== The Shortlog

(((git commands, shortlog)))
It's time to email your mailing list of people who want to know what's happening in your project.
A nice way of quickly getting a sort of changelog of what has been added to your project since your last release or email is to use the `git shortlog` command.
It summarizes all the commits in the range you give it; for example, the following gives you a summary of all the commits since your last release, if your last release was named v1.0.1:

[source,console]
----
$ git shortlog --no-merges master --not v1.0.1
Chris Wanstrath (8):
      Add support for annotated tags to Grit::Tag
      Add packed-refs annotated tag support.
      Add Grit::Commit#to_patch
      Update version and History.txt
      Remove stray `puts`
      Make ls_tree ignore nils

Tom Preston-Werner (4):
      fix dates in history
      dynamic version method
      Version bump to 1.0.2
      Regenerated gemspec for version 1.0.2
----

You get a clean summary of all the commits since v1.0.1, grouped by author, that you can email to your list.
